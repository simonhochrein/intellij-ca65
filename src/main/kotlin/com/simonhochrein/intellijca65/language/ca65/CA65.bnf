{
    parserClass="com.simonhochrein.intellijca65.language.ca65.CA65Parser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="CA65"
    psiImplClassSuffix="Impl"
    psiPackage="com.simonhochrein.intellijca65.language.ca65.psi"
    psiImplPackage="com.simonhochrein.intellijca65.language.ca65.psi.impl"

    elementTypeHolderClass="com.simonhochrein.intellijca65.language.ca65.psi.CA65Types"
    elementTypeClass="com.simonhochrein.intellijca65.language.ca65.psi.CA65ElementType"
    tokenTypeClass="com.simonhochrein.intellijca65.language.ca65.psi.CA65TokenType"

    psiImplUtilClass="com.simonhochrein.intellijca65.language.ca65.psi.impl.CA65PsiImplUtilKt"
}

ca65File ::= item_*

private item_ ::= (macro | constant | line_comment | section | instruction | NEWLINE)

private macro ::= include | proc

include ::= MACRO_INCLUDE string_literal (line_comment | NEWLINE)

string_literal ::= STRING {
	mixin="com.simonhochrein.intellijca65.language.ca65.psi.impl.CA65StringLiteralMixin"
}

proc ::= MACRO_PROC IDENTIFIER item_* MACRO_PROCEND {
	mixin="com.simonhochrein.intellijca65.language.ca65.psi.impl.CA65NamedElementImpl"
	implements="com.simonhochrein.intellijca65.language.ca65.psi.CA65NamedElement"
	methods=[getName setName getNameIdentifier getPresentation]
}

constant ::= identifier (EQUALS | LABEL_ASSIGNMENT) expression

line_comment ::= COMMENT

section ::= label (line_comment | instruction | NEWLINE)* {
	mixin="com.simonhochrein.intellijca65.language.ca65.psi.impl.CA65NamedElementImpl"
	implements="com.simonhochrein.intellijca65.language.ca65.psi.CA65NamedElement"
	methods=[getKey getName setName getNameIdentifier getPresentation]
}

label ::= IDENTIFIER COLON

instruction ::= (
	PSEUDO_INSTRUCTION expression (COMMA expression)*
	| PSEUDO_INSTRUCTION
	| IDENTIFIER expression (COMMA expression)*
	| IDENTIFIER
	| OPCODE expression (COMMA expression)*
	| OPCODE
) line_comment? NEWLINE


expression ::= (OPEN_PAREN expression CLOSE_PAREN) | (OPEN_BRACE expression CLOSE_BRACE) | math_expression | STRING | number | immediate | namespaced_identifier
math_expression ::= (namespaced_identifier | number) (bitwise_operator (namespaced_identifier | number))+

bitwise_operator ::= BITWISE_OR | BITWISE_AND | PLUS | MINUS | MUL | DIV

number ::= HEX_NUMBER | BIN_NUMBER | DEC_NUMBER

immediate ::= HASH expression

namespaced_identifier ::= IDENTIFIER (NAMESPACE_SEPARATOR IDENTIFIER)* | (NAMESPACE_SEPARATOR IDENTIFIER)+
{
	mixin="com.simonhochrein.intellijca65.language.ca65.psi.impl.CA65NamedElementImpl"
	implements="com.simonhochrein.intellijca65.language.ca65.psi.CA65NamedElement"
	methods=[getName setName getNameIdentifier getReferences]
}